<?php namespace Jarrett\RockPaperScissorsSpockLizard;

use Jarrett\RockPaperScissorsSpockLizardException;

/**
 * Class RockPaperScissorsSpockLizard
 *
 * @author Jarrett Barnett <hello@jarrettbarnett.com
 * @see http://www.samkass.com/theories/RPSSL.html
 */
class Player implements PlayerInterface
{
    /**
     * Player ID - generated by game
     * @var $id
     */
    protected $id;
    
    /**
     * Player name
     * @var bool|Player
     */
    protected $name;
    
    /**
     * Is player a bot?
     * @var bool
     */
    protected $is_bot = false;
    
    /**
     * @var $moves
     */
    private $moves = [];

    /**
     * Player constructor.
     * @param string $name
     */
    public function __construct($name = '')
    {
        $this->setName($name);
    }
    
    /**
     * Queue a play
     * @param $move
     * @return $this
     * @throws RockPaperScissorsSpockLizardException
     */
    public function move($move)
    {
        $last_move = $this->getLastMoveIndex();
        
        if (is_array($last_move) && array_shift($last_move) === false)
        {
            throw new RockPaperScissorsSpockLizardException('Cannot set another move until the previous move has been played');
        }
        
        if (empty($move)) {
            throw new RockPaperScissorsSpockLizardException('Move cannot be empty');
        }
        
        $this->moves[] = [$move => false];
        
        return $this;
    }
    
    /**
     * Set ID
     * @param $id
     * @return $this
     */
    public function setId($id)
    {
        $this->id = $id;
        
        return $this;
    }
    
    /**
     * Get ID
     * @return mixed
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Set player name
     * @param $name
     * @return $this|bool
     */
    public function setName($name)
    {
        if (empty($name))
        {
            return false;
        }
        
        $this->name = $name;
        
        return $this;
    }
    
    /**
     * Get name
     * @return bool|Player
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Get Move History
     * @return array
     */
    public function getMoveHistory()
    {
        return $this->moves;
    }

    /**
     * Mark Last Move As Played
     * @return $this
     */
    public function lastMoveIsPlayed()
    {
        $moves = $this->getMoveHistory();
        $offset = count($moves) - 1;
        $last_item = $this->moves[$offset];
        $this->moves[$offset][key($last_item)] = true;
        return $this;
    }
    
    /**
     * Get Last Move
     * @return mixed
     */
    public function getLastMoveIndex()
    {
        $move_history = $this->getMoveHistory();

        // get last value
        $last_move = end($move_history);

        // reset pointer
        reset($this->moves);

        return $last_move;
    }

    /**
     * Get Last Move
     * @return mixed
     */
    public function getLastMove()
    {
        $last_move_index = $this->getLastMoveIndex();

        return key($last_move_index);
    }
    
    /**
     * Is Bot? or set as a bot
     * @param bool $is_bot
     * @return $this if setting player to a bot, otherwise true/false depending on whether player is a bot
     */
    public function isBot($is_bot = null)
    {
        // if no parameter provided, return boolean for whether player is a bot or not
        if ($is_bot === null) {
            return $this->is_bot;
        }
        
        $this->is_bot = (bool) $is_bot;
        
        return $this;
    }
}
